schema {
  query: Query
  mutation: MutationRoot
}

# A animal.
type Animal implements Node {
  # The ID of an object
  id: ID!
  owner: String
  profilePhoto: String
  litter: String
  fullName: String
  nickName: String
  birthDate: String
}

# Root mutation
type MutationRoot {
  updateUser(input: UserMutationInputType): UserMutationPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Root query
type Query {
  viewer(token: String): Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

# A user.
type User implements Node {
  # The ID of an object
  id: ID!
  token: String
  email: String
  firstName: String
  lastName: String
  profilePhotoUrl: String
  animals: [Animal]
}

input UserMutationInputType {
  clientMutationId: String
  id: String
  token: String
  email: String
  firstName: String
  lastName: String
  profilePhotoUrl: String
}

type UserMutationPayload {
  clientMutationId: String
  user: User
}

# Viewer type
type Viewer {
  user(id: String): User
  userByEmail(email: String): User
  users: [User]
  incompleteUsers: [User]
  actor: User
}
