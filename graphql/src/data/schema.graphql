schema {
  query: Query
  mutation: MutationRoot
}

# Root mutation
type MutationRoot {
  updateUser(input: UserMutationInputType): UserMutationPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Root query
type Query {
  viewer(token: String): Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

# A user.
type User implements Node {
  # The ID of an object
  id: ID!
  token: String
  email: String
  firstName: String
  lastName: String
  profilePhotoUrl: String
  isCompleteProfile: Boolean
  isCurrentUser: Boolean
  isFriend: Boolean
  numFriends: Int
  friends: UserConnection
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

input UserMutationInputType {
  clientMutationId: String
  id: String
  token: String
  email: String
  firstName: String
  lastName: String
  profilePhotoUrl: String
}

type UserMutationPayload {
  clientMutationId: String
  user: User
}

# Viewer type
type Viewer {
  user(id: String): User
  userByEmail(email: String): User
  users: [User]
  incompleteUsers: [User]
  actor: User
}
