schema {
  query: Query
  mutation: MutationRoot
}

# An animal.
type Animal implements Node {
  # The ID of an object
  id: ID!
  createdAt: String
  fullName: String
  nickName: String
  profilePhotoUrl: String
  numOwners: Int
  owners(after: String, first: Int, before: String, last: Int): UserConnection
  taggedPhotos(after: String, first: Int, before: String, last: Int): PhotoConnection
}

type AnimalConnection {
  edges: [AnimalEdge]
  pageInfo: PageInfo!
}

type AnimalEdge {
  cursor: Cursor
  node: Animal
}

input CreateAnimalInput {
  token: String!
  fullName: String!
  nickName: String!
  animalKind: String!
  birthDate: String
  deathDate: String
  deceased: Boolean!
  clientMutationId: String
}

type CreateAnimalPayload {
  animal: Animal
  user: User
  clientMutationId: String
}

scalar Cursor

# A friend request.
type FriendRequest implements Node {
  # The ID of an object
  id: ID!
  createdAt: String
  from: User
  to: User
  declined: Boolean
  accepted: Boolean
  ignored: Boolean
}

# A friend request relation
type FriendRequestRelation {
  received: FriendRequest
  sent: FriendRequest
}

# Root mutation
type MutationRoot {
  updateUser(input: UserMutationInputType): UserMutationPayload
  createAnimal(input: CreateAnimalInput!): CreateAnimalPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# A photo
type Photo implements Node {
  # The ID of an object
  id: ID!
  createdAt: String
  url: String
  taggedUsers(after: String, first: Int, before: String, last: Int): UserConnection
  taggedAnimals(after: String, first: Int, before: String, last: Int): AnimalConnection
}

type PhotoConnection {
  edges: [PhotoEdge]
  pageInfo: PageInfo!
}

type PhotoEdge {
  cursor: Cursor
  node: Photo
}

# Root query
type Query {
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

# A user.
type User implements Node {
  # The ID of an object
  id: ID!
  token: String
  createdAt: String
  email: String
  firstName: String
  lastName: String
  profilePhotoUrl: String
  isCompleteProfile: Boolean
  isCurrentUser: Boolean
  isFriend: Boolean
  numFriends: Int
  numAnimals: Int
  friendRequests: FriendRequestRelation
  friends(after: String, first: Int, before: String, last: Int): UserConnection
  animals(after: String, first: Int, before: String, last: Int): AnimalConnection
  taggedPhotos(after: String, first: Int, before: String, last: Int): PhotoConnection
  activeIncomingFriendRequests: [FriendRequest]
  activeOutgoingFriendRequests: [FriendRequest]
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: Cursor
  node: User
}

input UserMutationInputType {
  clientMutationId: String
  id: String
  token: String
  email: String
  firstName: String
  lastName: String
  profilePhotoUrl: String
}

type UserMutationPayload {
  clientMutationId: String
  user: User
}

# Viewer type
type Viewer {
  user(id: String): User
  userByEmail(email: String): User
  animal(id: String): Animal
  users(after: String, first: Int, before: String, last: Int): UserConnection
  incompleteUsers: [User]
  actor: User
}
